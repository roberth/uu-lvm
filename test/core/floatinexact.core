module Float where


instruction neq "neint"  :: Int -> Int -> Int
instruction and "andint" :: Int -> Int -> Int
instruction add "addfloat":: Float -> Float -> Float

extern float        "float_of_string" :: "Fz"
extern fpgetsticky  "fp_get_sticky"   :: "I"
extern fpstickymask "fp_sticky_mask"  :: "Ii"

data ArithmeticException
  = FloatInvalid                      -- float invalid operation
  | FloatDivideByZero                 -- float division by zero
  | FloatOverflow                     -- float has overflowed
  | FloatUnderflow                    -- float has underflowed
  | FloatInexact                      -- float result is inexact
  | FloatDenormal                     -- denormalized float value
  | DivideByZero                      -- integer division by zero
  | Overflow                          -- integer overflow
  | Underflow                         -- integer underflow
  | InvalidOperation                  -- general arithmetic error
  | UnEmulated                        -- cannot emulate float instruction
  | NegativeSquareRoot                -- square root of negative number
  | FloatStackOverflow                -- float hardware stack has overflowed
  | FloatStackUnderflow               -- float hardware stack has underflowed

main = case float "1.0" of 
        x -> case float "0.1" of
               y -> case add x y of
                      _ -> case fpstickymask FloatInexact of
                             mask -> case fpgetsticky of
                                       sw -> case and mask sw of
                                               status -> neq status 0